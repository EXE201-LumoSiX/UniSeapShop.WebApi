name: Docker Build, Push and Deploy

on:
  push:
    branches:
      - master  # Khi có code mới được push lên nhánh main thì workflow này sẽ chạy

jobs:
  build-and-push:
    runs-on: ubuntu-latest  # Máy chủ ảo mà GitHub cung cấp để chạy pipeline

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3  # Lấy code từ GitHub repository về

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3  # Thiết lập công cụ Buildx của Docker để build hiệu quả hơn

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}  # Đăng nhập Docker Hub bằng secret
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .  # Thư mục chứa Dockerfile và mã nguồn
          file: UniSeapShop.API/Dockerfile  # Vị trí file Dockerfile
          push: true  # Sau khi build xong thì đẩy (push) lên Docker Hub
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/uniseapshopapi:latest  # Gán tag cho image
          cache-from: type=gha  # Dùng cache từ GitHub Actions
          cache-to: type=gha,mode=max  # Tối đa hóa cache để dùng lại lần sau

  deploy:
    needs: build-and-push  # Chờ job build-and-push hoàn thành
    runs-on: ubuntu-latest  # Máy chủ ảo của GitHub để thực hiện thao tác SSH

    steps:
      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.3  # Plugin để chạy lệnh SSH từ xa vào VPS
        with:
          host: ${{ secrets.VPS_HOST }}  # IP hoặc domain của VPS (khai báo trong repo secret)
          username: ${{ secrets.VPS_USER }}  # Tên user đăng nhập (thường là root)
          password: ${{ secrets.VPS_PASSWORD }}  # SSH password để đăng nhập

          script: |
              cd /root/projects/uniseapshop
              
              # Set longer timeouts
              export COMPOSE_HTTP_TIMEOUT=300
              export DOCKER_CLIENT_TIMEOUT=300
              
              echo "Pulling latest Docker image with retry logic..."
              RETRY_COUNT=0
              MAX_RETRIES=5
              
              while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
                echo "Pull attempt $((RETRY_COUNT + 1))/$MAX_RETRIES..."
                
                if timeout 600 docker compose pull; then
                  echo "Pull successful!"
                  break
                else
                  RETRY_COUNT=$((RETRY_COUNT + 1))
                  if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                    echo "Pull failed, cleaning up and retrying in 60 seconds..."
                    docker system prune -f
                    sleep 60
                  else
                    echo "All retry attempts failed. Exiting..."
                    exit 1
                  fi
                fi
              done
              
              # Rest of your deployment script...
              echo "Backing up previous image tag..."
              docker image tag uniseapshopapi:latest uniseapshopapi:backup || true
              
              echo "Restarting container..."
              docker compose up -d
              
              echo "Removing dangling images to save space..."
              docker image prune -f
              
              echo "Checking health status..."
              curl -f http://localhost:5000/health || echo "WARNING: Healthcheck failed"
